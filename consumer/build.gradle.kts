import java.util.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.7/samples
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    java
    id("org.springframework.boot") version "3.2.4"
    id("io.spring.dependency-management") version "1.1.4"
}

group = "com.priyakdey.kafka"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

repositories {
    mavenCentral()
}

// Load dependency versions from external properties file
val dependenciesPropertiesFile: File = project.rootProject.file("dependencies.properties")
if (dependenciesPropertiesFile.exists()) {
    logger.lifecycle("Loading properties from $dependenciesPropertiesFile...")
    val properties = Properties()
    try {
        dependenciesPropertiesFile.reader().use { reader ->
            properties.load(reader)
        }

        properties.forEach { key, value ->
            project.extensions.extraProperties.set(key.toString(), value)
        }

    } catch (e: Exception) {
        logger.warn("An error occurred while loading properties from $dependenciesPropertiesFile", e)
    }
}

val jacksonDatabind: String by project

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabind}")

    implementation("org.springframework.kafka:spring-kafka")


    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.kafka:spring-kafka-test")
}

tasks.withType<Test> {
    useJUnitPlatform()
}
